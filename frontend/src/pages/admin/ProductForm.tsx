import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import "./ProductForm.css";

interface Category {
    id: number;
    name: string;
    parent_id: number | null;
}

const ProductForm: React.FC = () => {
    const [product, setProduct] = useState({
        name: "",
        description: "",
        price: 0,
        stock: 0,
        category_id: null as number | null, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
        image_url: "",
    });
    const [categories, setCategories] = useState<Category[]>([]);
    const [file, setFile] = useState<File | null>(null);
    const navigate = useNavigate();
    const { id } = useParams();

    useEffect(() => {
        const fetchCategories = async () => {
            try {
                const response = await fetch("/api/categories");
                if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
                const data = await response.json();
                setCategories(Array.isArray(data) ? data : []);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞:", error);
                setCategories([]); // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç `null`
            }
        };

        fetchCategories();

        if (id) {
            fetch(`/api/products/${id}`)
                .then((res) => res.json())
                .then((data) => {
                    if (data) {
                        setProduct({
                            ...data,
                            category_id: data.category_id ?? null, // ‚úÖ –§–∏–∫—Å, –µ—Å–ª–∏ `category_id` = `null`
                        });
                    }
                })
                .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:", err));
        }
    }, [id]);

    const handleUpload = async () => {
        if (!file) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π!");
            return;
        }

        const formData = new FormData();
        formData.append("file", file);

        try {
            const response = await fetch("/api/upload", {
                method: "POST",
                body: formData,
                headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
            });

            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!");
            }

            const data = await response.json();
            setProduct({ ...product, image_url: data.url });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", error);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        const method = id ? "PUT" : "POST";
        const url = id ? `/api/products/${id}` : "/api/addProduct";

        try {
            const response = await fetch(url, {
                method,
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
                body: JSON.stringify(product),
            });

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
            navigate("/admin/products");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
        }
    };

    return (
        <div className="product-form-container">
            <h1>{id ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä" : "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"}</h1>
            <form onSubmit={handleSubmit} className="product-form">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    value={product.name}
                    onChange={(e) => setProduct({ ...product, name: e.target.value })}
                    required
                />

                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    value={product.description}
                    onChange={(e) => setProduct({ ...product, description: e.target.value })}
                    required
                />

                <label>–¶–µ–Ω–∞</label>
                <input
                    type="number"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
                    value={product.price}
                    onChange={(e) => setProduct({ ...product, price: Number(e.target.value) })}
                    required
                />

                <label>–û—Å—Ç–∞—Ç–æ–∫</label>
                <input
                    type="number"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                    value={product.stock}
                    onChange={(e) => setProduct({ ...product, stock: Number(e.target.value) })}
                    required
                />

                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select
                    value={product.category_id !== null ? product.category_id : ""}
                    onChange={(e) => setProduct({
                        ...product,
                        category_id: e.target.value ? Number(e.target.value) : null
                    })}
                    required
                >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                    {categories.map((category) => (
                        <option key={category.id} value={category.id}>
                            {category.parent_id ? `‚Ü≥ ${category.name}` : category.name}
                        </option>
                    ))}
                </select>

                <label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</label>
                <input type="file" onChange={(e) => setFile(e.target.files ? e.target.files[0] : null)} />
                <button type="button" className="upload-btn" onClick={handleUpload}>üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>

                {product.image_url && product.image_url !== "" && (
                    <div className="image-preview">
                        <img src={product.image_url} alt="–¢–æ–≤–∞—Ä" />
                    </div>
                )}

                <button type="submit" className="save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </form>
        </div>
    );
};

export default ProductForm;
